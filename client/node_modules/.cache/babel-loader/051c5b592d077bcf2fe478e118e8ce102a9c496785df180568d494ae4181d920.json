{"ast":null,"code":"/*Setting our Redux toolkit state*/\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  /*State that will be stored in our Global State-Will be accessible throughout our entire application*/\n  mode: \"light\",\n  //Represent Dark Mode and Light Mode\n  user: null,\n  //Authorization Information we will store\n  token: null,\n  //Authorization Information we will store\n  posts: []\n}; /*We can grab it anywhere so we don't need to pass this State and properties down to different components */\n\n//Action and reducers all written in here along with state logic\nexport const authSlice = createSlice({\n  name: \"auth\",\n  //name of auth to represent auth workflow\n  initialState,\n  //Passing initialState into initial State\n  reducers: {\n    //Finally reducers which are our actions-Basically functions that modify global state\n    setMode: state => {\n      //Changing from Light Mode to dark Mode and vice versa\n      state.mode = state.mode === \"light\" ? \"dark\" : \"light\";\n    },\n    //Redux has this idea of we can't change state directly-We are always supposed to replace the Object as opposed to directly modifying the state\n    //Even though it looks like we have modified the state directly but under the hood this is not happening-By Built In Library called Imer from Toolkit\n    setLogin: (state, action) => {\n      //action is basically the parameter/argument for the function\n      state.user = action.payload.user; //Setting user parameter of state from user parameter of payload\n      state.token = action.payload.token; //action includes all the arguments\n    },\n\n    setLogout: state => {\n      state.user = null; /*Resetting Parameters to Null when User logs out */\n      state.token = null;\n    },\n    setFriends: (state, action) => {\n      /*Setting Friends in our Local State-As we need to keep this Information */\n      if (state.user) {\n        //If User already exists\n        state.user.friends = action.payload.friends;\n      } else {\n        console.error(\"User friends non-existent\");\n      }\n    },\n    setPosts: (state, action) => {\n      //Simple functions to modify our states as we need\n      state.posts = action.payload.posts;\n    },\n    setPost: (state, action) => {\n      const updatedPosts = state.posts.map(post => {\n        //Grab the list of post and map through each one \n        if (post._id === action.payload.post._id) return action.payload.post; //If Post ID=Current Post ID we are sending into this function then return the post that we want\n        return post;\n      });\n      state.posts = updatedPosts;\n    }\n  }\n});\n\n//Part of Redux Toolkit\nexport const {\n  setMode,\n  setLogin,\n  setLogout,\n  setFriends,\n  setPosts,\n  setPost\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","mode","user","token","posts","authSlice","name","reducers","setMode","state","setLogin","action","payload","setLogout","setFriends","friends","console","error","setPosts","setPost","updatedPosts","map","post","_id","actions","reducer"],"sources":["E:/project_4/TripTales-Complete/client/src/state/index.js"],"sourcesContent":["/*Setting our Redux toolkit state*/\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {/*State that will be stored in our Global State-Will be accessible throughout our entire application*/\r\n  mode: \"light\",//Represent Dark Mode and Light Mode\r\n  user: null,//Authorization Information we will store\r\n  token: null,//Authorization Information we will store\r\n  posts: [],\r\n};/*We can grab it anywhere so we don't need to pass this State and properties down to different components */\r\n\r\n//Action and reducers all written in here along with state logic\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",//name of auth to represent auth workflow\r\n  initialState,//Passing initialState into initial State\r\n  reducers: {//Finally reducers which are our actions-Basically functions that modify global state\r\n    setMode: (state) => {//Changing from Light Mode to dark Mode and vice versa\r\n      state.mode = state.mode === \"light\" ? \"dark\" : \"light\";\r\n    },//Redux has this idea of we can't change state directly-We are always supposed to replace the Object as opposed to directly modifying the state\r\n    //Even though it looks like we have modified the state directly but under the hood this is not happening-By Built In Library called Imer from Toolkit\r\n    setLogin: (state, action) => {//action is basically the parameter/argument for the function\r\n      state.user = action.payload.user;//Setting user parameter of state from user parameter of payload\r\n      state.token = action.payload.token;//action includes all the arguments\r\n    },\r\n    setLogout: (state) => {\r\n      state.user = null;/*Resetting Parameters to Null when User logs out */\r\n      state.token = null;\r\n    },\r\n    setFriends: (state, action) => {/*Setting Friends in our Local State-As we need to keep this Information */\r\n      if (state.user) {//If User already exists\r\n        state.user.friends = action.payload.friends;\r\n      } else {\r\n        console.error(\"User friends non-existent\");\r\n      }\r\n    },\r\n    setPosts: (state, action) => {//Simple functions to modify our states as we need\r\n      state.posts = action.payload.posts;\r\n    },\r\n    setPost: (state, action) => {\r\n      const updatedPosts = state.posts.map((post) => {//Grab the list of post and map through each one \r\n        if (post._id === action.payload.post._id) return action.payload.post;//If Post ID=Current Post ID we are sending into this function then return the post that we want\r\n        return post;\r\n      });\r\n      state.posts = updatedPosts;\r\n    },\r\n  },\r\n});\r\n\r\n//Part of Redux Toolkit\r\nexport const { setMode, setLogin, setLogout, setFriends, setPosts, setPost }=authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAC;EACpBC,IAAI,EAAE,OAAO;EAAC;EACdC,IAAI,EAAE,IAAI;EAAC;EACXC,KAAK,EAAE,IAAI;EAAC;EACZC,KAAK,EAAE;AACT,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;EACnCO,IAAI,EAAE,MAAM;EAAC;EACbN,YAAY;EAAC;EACbO,QAAQ,EAAE;IAAC;IACTC,OAAO,EAAGC,KAAK,IAAK;MAAC;MACnBA,KAAK,CAACR,IAAI,GAAGQ,KAAK,CAACR,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACxD,CAAC;IAAC;IACF;IACAS,QAAQ,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAAC;MAC5BF,KAAK,CAACP,IAAI,GAAGS,MAAM,CAACC,OAAO,CAACV,IAAI,CAAC;MACjCO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACC,OAAO,CAACT,KAAK,CAAC;IACrC,CAAC;;IACDU,SAAS,EAAGJ,KAAK,IAAK;MACpBA,KAAK,CAACP,IAAI,GAAG,IAAI,CAAC;MAClBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC;IACDW,UAAU,EAAEA,CAACL,KAAK,EAAEE,MAAM,KAAK;MAAC;MAC9B,IAAIF,KAAK,CAACP,IAAI,EAAE;QAAC;QACfO,KAAK,CAACP,IAAI,CAACa,OAAO,GAAGJ,MAAM,CAACC,OAAO,CAACG,OAAO;MAC7C,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC5C;IACF,CAAC;IACDC,QAAQ,EAAEA,CAACT,KAAK,EAAEE,MAAM,KAAK;MAAC;MAC5BF,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO,CAACR,KAAK;IACpC,CAAC;IACDe,OAAO,EAAEA,CAACV,KAAK,EAAEE,MAAM,KAAK;MAC1B,MAAMS,YAAY,GAAGX,KAAK,CAACL,KAAK,CAACiB,GAAG,CAAEC,IAAI,IAAK;QAAC;QAC9C,IAAIA,IAAI,CAACC,GAAG,KAAKZ,MAAM,CAACC,OAAO,CAACU,IAAI,CAACC,GAAG,EAAE,OAAOZ,MAAM,CAACC,OAAO,CAACU,IAAI,CAAC;QACrE,OAAOA,IAAI;MACb,CAAC,CAAC;MACFb,KAAK,CAACL,KAAK,GAAGgB,YAAY;IAC5B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEZ,OAAO;EAAEE,QAAQ;EAAEG,SAAS;EAAEC,UAAU;EAAEI,QAAQ;EAAEC;AAAQ,CAAC,GAACd,SAAS,CAACmB,OAAO;AAC9F,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}