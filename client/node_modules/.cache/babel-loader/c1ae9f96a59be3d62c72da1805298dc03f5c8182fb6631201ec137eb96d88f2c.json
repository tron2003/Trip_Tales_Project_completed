{"ast":null,"code":"var _jsxFileName = \"E:\\\\project_4\\\\TripTales-Complete\\\\client\\\\src\\\\scenes\\\\widgets\\\\PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPosts } from \"state\";\nimport PostWidget from \"./PostWidget\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = ({\n  userId,\n  isProfile = false\n}) => {\n  _s();\n  const dispatch = useDispatch(); //Using Redux\n  const posts = useSelector(state => state.posts); //Storing lists of Posts\n  const token = useSelector(state => state.token); //Grabbing the tokens as well\n\n  //Two API Calls-As on HomePage,all posts will be fetched But on Profile Page,we are gonna get only the User Posts\n  const getPosts = async () => {\n    const response = await fetch(\"http://localhost:3001/posts\", {\n      //Grab all the posts\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      } //Validate by API Call\n    });\n\n    const data = await response.json(); //Making it usable with reponse.json\n    dispatch(setPosts({\n      posts: data\n    })); //Dispatch and set Posts inside our store\n  };\n\n  //Almost same as getPosts with only difference in URL\n  const getUserPosts = async () => {\n    const response = await fetch(`http://localhost:3001/posts/${userId}/posts`,\n    //Fetching the posts from a particular user\n    {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n  }, []); //eslint-disable-line react-hooks/exhaustive-deps\n  //Giving an empty array so it only calls once-The eslint comment to get rid of the warning\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.map(({\n      _id,\n      userId,\n      firstName,\n      lastName,\n      description,\n      location,\n      picturePath,\n      userPicturePath,\n      likes,\n      comments\n    }) => /*#__PURE__*/_jsxDEV(PostWidget\n    //Return Post Widget\n    , {\n      //Need a Key to remove React warnings\n      postId: _id,\n      postUserId: userId,\n      name: `${firstName} ${lastName}`,\n      description: description,\n      location: location,\n      picturePath: picturePath,\n      userPicturePath: userPicturePath,\n      likes: likes,\n      comments: comments\n    }, _id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n};\n_s(PostsWidget, \"7TqOh3V0nCSP3QUJlbitnmq7L8o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setPosts","PostWidget","jsxDEV","_jsxDEV","Fragment","_Fragment","PostsWidget","userId","isProfile","_s","dispatch","posts","state","token","getPosts","response","fetch","method","headers","Authorization","data","json","getUserPosts","children","map","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments","postId","postUserId","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/project_4/TripTales-Complete/client/src/scenes/widgets/PostsWidget.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPosts } from \"state\";\r\nimport PostWidget from \"./PostWidget\";\r\n\r\nconst PostsWidget = ({ userId, isProfile = false }) => {\r\n  const dispatch = useDispatch();//Using Redux\r\n  const posts = useSelector((state) => state.posts);//Storing lists of Posts\r\n  const token = useSelector((state) => state.token);//Grabbing the tokens as well\r\n\r\n  //Two API Calls-As on HomePage,all posts will be fetched But on Profile Page,we are gonna get only the User Posts\r\n  const getPosts = async () => {\r\n    const response = await fetch(\"http://localhost:3001/posts\", {//Grab all the posts\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${token}` },//Validate by API Call\r\n    });\r\n    const data = await response.json();//Making it usable with reponse.json\r\n    dispatch(setPosts({ posts: data }));//Dispatch and set Posts inside our store\r\n  };\r\n\r\n  //Almost same as getPosts with only difference in URL\r\n  const getUserPosts = async () => {\r\n    const response = await fetch(\r\n      `http://localhost:3001/posts/${userId}/posts`,//Fetching the posts from a particular user\r\n      {\r\n        method: \"GET\",\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      }\r\n    );\r\n    const data = await response.json();\r\n    dispatch(setPosts({ posts: data }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isProfile) {\r\n      getUserPosts();\r\n    } else {\r\n      getPosts();\r\n    }\r\n  }, []); //eslint-disable-line react-hooks/exhaustive-deps\r\n  //Giving an empty array so it only calls once-The eslint comment to get rid of the warning\r\n  return (\r\n    <>\r\n      {/*Creating Component for each Post and Destructure number of item from it*/}\r\n      {posts.map(\r\n        ({\r\n          _id,\r\n          userId,\r\n          firstName,\r\n          lastName,\r\n          description,\r\n          location,\r\n          picturePath,\r\n          userPicturePath,\r\n          likes,\r\n          comments,\r\n        }) => (\r\n          <PostWidget\r\n            //Return Post Widget\r\n            key={_id}//Need a Key to remove React warnings\r\n            postId={_id}\r\n            postUserId={userId}\r\n            name={`${firstName} ${lastName}`}\r\n            description={description}\r\n            location={location}\r\n            picturePath={picturePath}\r\n            userPicturePath={userPicturePath}\r\n            likes={likes}\r\n            comments={comments}\r\n          />\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostsWidget;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,WAAW,GAAGA,CAAC;EAAEC,MAAM;EAAEC,SAAS,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC,CAAC;EAC/B,MAAMa,KAAK,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC,CAAC;EAClD,MAAME,KAAK,GAAGd,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC,CAAC;;EAElD;EACA,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAAC;MAC3DC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASN,KAAM;MAAE,CAAC,CAAC;IAChD,CAAC,CAAC;;IACF,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;IACnCX,QAAQ,CAACV,QAAQ,CAAC;MAAEW,KAAK,EAAES;IAAK,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CACzB,+BAA8BT,MAAO,QAAO;IAAC;IAC9C;MACEU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASN,KAAM;MAAE;IAC9C,CACF,CAAC;IACD,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCX,QAAQ,CAACV,QAAQ,CAAC;MAAEW,KAAK,EAAES;IAAK,CAAC,CAAC,CAAC;EACrC,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,EAAE;MACbc,YAAY,CAAC,CAAC;IAChB,CAAC,MAAM;MACLR,QAAQ,CAAC,CAAC;IACZ;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR;EACA,oBACEX,OAAA,CAAAE,SAAA;IAAAkB,QAAA,EAEGZ,KAAK,CAACa,GAAG,CACR,CAAC;MACCC,GAAG;MACHlB,MAAM;MACNmB,SAAS;MACTC,QAAQ;MACRC,WAAW;MACXC,QAAQ;MACRC,WAAW;MACXC,eAAe;MACfC,KAAK;MACLC;IACF,CAAC,kBACC9B,OAAA,CAACF;IACC;IAAA;MACS;MACTiC,MAAM,EAAET,GAAI;MACZU,UAAU,EAAE5B,MAAO;MACnB6B,IAAI,EAAG,GAAEV,SAAU,IAAGC,QAAS,EAAE;MACjCC,WAAW,EAAEA,WAAY;MACzBC,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBC,eAAe,EAAEA,eAAgB;MACjCC,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAEA;IAAS,GATdR,GAAG;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUT,CAEL;EAAC,gBACD,CAAC;AAEP,CAAC;AAAC/B,EAAA,CArEIH,WAAW;EAAA,QACER,WAAW,EACdC,WAAW,EACXA,WAAW;AAAA;AAAA0C,EAAA,GAHrBnC,WAAW;AAuEjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}