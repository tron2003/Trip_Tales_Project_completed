{"ast":null,"code":"var _jsxFileName = \"E:\\\\project_4\\\\TripTales-Complete\\\\client\\\\src\\\\scenes\\\\loginPage\\\\Form.jsx\",\n  _s = $RefreshSig$();\n//Register and Login Functionality\nimport { useState } from \"react\";\nimport { Box, Button, TextField, useMediaQuery, Typography, useTheme } from \"@mui/material\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\"; //Just for that Particular Icon\nimport { Formik } from \"formik\"; //Will be used which is our Form Library\nimport * as yup from \"yup\"; //Importing everything from yup which is our Validation Library\nimport { useNavigate } from \"react-router-dom\"; //Be able to Navigate when registered to Login Page\nimport { useDispatch } from \"react-redux\"; //Store User Information\nimport { setLogin } from \"state\"; //Once the User sets the login Page\nimport Dropzone from \"react-dropzone\"; //To Let user drop a file/image for their Profile Photo\nimport FlexBetween from \"components/FlexBetween\"; //Will be using a lot\n\n//Yup Validation Schema-Determines the Shape of how the Form Library is going to save the Information\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst registerSchema = yup.object().shape({\n  //Passing all the values of our Schema\n  firstName: yup.string().required(\"required\"),\n  lastName: yup.string().required(\"required\"),\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n  location: yup.string().required(\"required\"),\n  occupation: yup.string().required(\"required\"),\n  picture: yup.string().required(\"required\")\n  //Validating the credentials values used while Registering\n});\n\nconst loginSchema = yup.object().shape({\n  //Login Schema-Will be a Strip Down version of Register Schema\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\")\n});\n\n//Initial Value Setup (As Schema for Values has been defined)\nconst initialValuesRegister = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  location: \"\",\n  occupation: \"\",\n  picture: \"\"\n};\nconst initialValuesLogin = {\n  email: \"\",\n  password: \"\"\n};\n\n//Creating our Form Component\nconst Form = () => {\n  _s();\n  //Creating Number of States\n  const [pageType, setPageType] = useState(\"login\"); //Display form depending on PageType-Initial value set to login\n  const {\n    palette\n  } = useTheme(); //Grabbing Palette from UseTheme\n  const dispatch = useDispatch(); //Setting up Dispatch\n  const navigate = useNavigate(); //useNavigate so that we can Navigate to different Pages\n  const isNonMobile = useMediaQuery(\"(min-width:600px)\");\n  const isLogin = pageType === \"login\"; //Variables just for our Convenience\n  const isRegister = pageType === \"register\"; //Variables just for our Convenience\n  //As they are booleans-So they are starting with prefix 'is'\n\n  const register = async (values, onSubmitProps) => {\n    /*Every value that we have created inside the TextField will show up in the value Parameter\r\n    Typically/Normally we could just use that values and then pass it into our request body itself\r\n    But as we have picture Image,we are going to use this thing called FormData from our Javascript API\r\n    This allows us to send form Info with Image-It essentially will be an Object*/\n    const formData = new FormData();\n    for (let value in values) {\n      //Looping through every Key value in this values Object\n      formData.append(value, values[value]); //Appending-One way to send the image through the request body\n    } //This will cycle through all the values added to Form Data\n    formData.append(\"picturePath\", values.picture.name); //Appending Picture Path that will essentially be an Image\n    //So Say Image is name as P1.jpg-Then that will be name of our file and that's going to be the path\n    //We need to append this manually as that's how for the Images,it is going to work\n\n    //Saving User response\n    const savedUserResponse = await fetch(\n    //Fetch Call to call an API to fetch whatever is returned\n    \"http://localhost:3001/auth/register\", {\n      //Sending form data to \"http://localhost:3001/auth/register\" API Call\n      method: \"POST\",\n      body: formData\n    });\n    const savedUser = await savedUserResponse.json(); //Converting it into parsable form by JSON and saving it\n    onSubmitProps.resetForm(); //Resetting the Form-So That's why we are passing onSubmitProps from Formik\n\n    if (savedUser) {\n      setPageType(\"login\"); //If Registration is successful,re-navigate to login page\n    }\n  };\n\n  const login = async (values, onSubmitProps) => {\n    //Same Arguments as Register function\n    const loggedInResponse = await fetch(\"http://localhost:3001/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //headers being Content-type as we are not doing Form Data now\n      body: JSON.stringify(values) //Jsonify the values as they are formatted in correct way already\n    });\n\n    const loggedIn = await loggedInResponse.json();\n    onSubmitProps.resetForm(); //Reset the Form\n    if (loggedIn) {\n      //API Call succeeded-User Successfully Authenticated Then dispatch setLogin Function\n      dispatch(setLogin({\n        user: loggedIn.user,\n        //Parameters coming from Redux state\n        token: loggedIn.token //To be passed as an Object-A Thing about Redux Toolkit\n      }));\n\n      navigate(\"/home\"); //Navigate to Home as we have successfully authenticated\n    }\n  };\n\n  const handleFormSubmit = async (values, onSubmitProps) => {\n    //Asynchronous Function to Handle Form Submission\n    //The arguments-values and onSubmitProps is coming from Formic\n    if (isLogin) await login(values, onSubmitProps);\n    if (isRegister) await register(values, onSubmitProps);\n  };\n  return (\n    /*#__PURE__*/\n    /*Returning the Formik Component*/\n    _jsxDEV(Formik, {\n      onSubmit: handleFormSubmit,\n      initialValues: isLogin ? initialValuesLogin : initialValuesRegister\n      /*So When we are on LoginPage-We will initialize the values with our Login Component\r\n      Otherwise we use our Register Object */,\n      validationSchema: isLogin ? loginSchema : registerSchema //Doing Same thing for Validation Schema\n      ,\n      children: ({\n        values,\n        errors,\n        touched,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        resetForm\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"grid\" //Using Grid for this Section\n          ,\n          gap: \"30px\" //Gap of 30pixels between items\n          ,\n          gridTemplateColumns: \"repeat(4, minmax(0, 1fr))\" //fr-Fractional Unit And we are creating our Grid Template Columns\n          //So We are splitting our grid into 4 sections-And it's going to be a minimum of 0 if it's too small it will shrink all the way to 0\n          //Otherwise We are gonna split it in equal fractions of Four\n          ,\n          sx: {\n            \"& > div\": {\n              gridColumn: isNonMobile ? undefined : \"span 4\"\n            } //Targeting any Div's of our Box as a Child Component/Child Class\n          } //If NonMobile-grid Columns of Text will be what we have defined earlier\n          //But If It is a Mobile-gridColumns span will be 4-That is each Text field will have it's own entire Width\n          ,\n          children: [isRegister &&\n          /*#__PURE__*/\n          //If On Register Page\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TextField\n            /*Textfield is an Input Component from Material UI*/, {\n              label: \"First Name\",\n              onBlur: handleBlur //handleBlur-Will handle the situation when we click out of a Input\n              ,\n              onChange: handleChange //Handle the situation when we are typing\n              ,\n              value: values.firstName,\n              name: \"firstName\" //Syncing it to the correct value in initialValuesRegister\n              //name has to align with the value we are setting in initialValuesRegister\n              ,\n              error: Boolean(touched.firstName) && Boolean(errors.firstName) //If First Name has been touched or There is an error=Will show Error in the Textfield\n              ,\n              helperText: touched.firstName && errors.firstName,\n              sx: {\n                gridColumn: \"span 2\"\n              } //In Larger Screens we will have span of 2\n              //But In Smaller Screen-span 4 will overwrite span 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField\n            //Rest all field are same-Just change the variables\n            , {\n              label: \"Last Name\",\n              onBlur: handleBlur,\n              onChange: handleChange,\n              value: values.lastName,\n              name: \"lastName\",\n              error: Boolean(touched.lastName) && Boolean(errors.lastName),\n              helperText: touched.lastName && errors.lastName,\n              sx: {\n                gridColumn: \"span 2\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField\n            //Everything Same-Just make them Span of 4\n            , {\n              label: \"Location\",\n              onBlur: handleBlur,\n              onChange: handleChange,\n              value: values.location,\n              name: \"location\",\n              error: Boolean(touched.location) && Boolean(errors.location),\n              helperText: touched.location && errors.location,\n              sx: {\n                gridColumn: \"span 4\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Occupation\",\n              onBlur: handleBlur,\n              onChange: handleChange,\n              value: values.occupation,\n              name: \"occupation\",\n              error: Boolean(touched.occupation) && Boolean(errors.occupation),\n              helperText: touched.occupation && errors.occupation,\n              sx: {\n                gridColumn: \"span 4\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box\n            //Box of Inputting Profile Image\n            , {\n              gridColumn: \"span 4\",\n              border: `1px solid ${palette.neutral.medium}`,\n              borderRadius: \"5px\",\n              p: \"1rem\",\n              children: /*#__PURE__*/_jsxDEV(Dropzone\n              //Inside Box-Using Component Dropzone\n              , {\n                acceptedFiles: \".jpg,.jpeg,.png\" //Passing Configurations for Files format to accept\n                ,\n                multiple: false //You can set only one file-Can't upload multiple files\n                ,\n                onDrop: acceptedFiles =>\n                //onDrop-Callback function of what we do with the Files once the User Drops it in\n                setFieldValue(\"picture\", acceptedFiles[0]) //Since we are using Dropzone,we have to set this value manually\n                //setFieldValue for a specific Formic Field called Picture\n                ,\n                children: ({\n                  getRootProps,\n                  getInputProps\n                }) =>\n                /*#__PURE__*/\n                //Callback Function from DropZone-Using Props to pass in JSX\n                _jsxDEV(Box, {\n                  ...getRootProps(),\n                  //Pass and to get Root Props-Something we have to do with the Dropzone\n                  border: `2px dashed ${palette.primary.main}`,\n                  p: \"1rem\",\n                  sx: {\n                    \"&:hover\": {\n                      cursor: \"pointer\"\n                    }\n                  } //Targetting the Hover\n                  ,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    ...getInputProps()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 25\n                  }, this), !values.picture ?\n                  /*#__PURE__*/\n                  //If Value does not exists for the picture-Display the Paragraph tag\n                  _jsxDEV(\"p\", {\n                    children: \"Add Picture Here\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(FlexBetween, {\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      children: values.picture.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(EditOutlinedIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Email\",\n            onBlur: handleBlur,\n            onChange: handleChange,\n            value: values.email,\n            name: \"email\",\n            error: Boolean(touched.email) && Boolean(errors.email),\n            helperText: touched.email && errors.email,\n            sx: {\n              gridColumn: \"span 4\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Password\",\n            type: \"password\" //Only thing added-As we want the Password to be hidden when typing it\n            ,\n            onBlur: handleBlur,\n            onChange: handleChange,\n            value: values.password,\n            name: \"password\",\n            error: Boolean(touched.password) && Boolean(errors.password),\n            helperText: touched.password && errors.password,\n            sx: {\n              gridColumn: \"span 4\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            type: \"submit\",\n            sx: {\n              m: \"2rem 0\",\n              p: \"1rem\",\n              backgroundColor: palette.primary.main,\n              color: palette.background.alt,\n              \"&:hover\": {\n                color: palette.primary.main\n              }\n            },\n            children: [isLogin ? \"LOGIN\" : \"REGISTER\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            onClick: () => {\n              setPageType(isLogin ? \"register\" : \"login\");\n              resetForm(); //When Switching between register and login,we are cleaning the inputs we already have\n            },\n\n            sx: {\n              textDecoration: \"underline\",\n              color: palette.primary.main,\n              \"&:hover\": {\n                cursor: \"pointer\",\n                color: palette.primary.light\n              }\n            },\n            children: isLogin ? \"Don't have an account? Sign Up here\" : \"Already have an account? Login here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Form, \"8DIOG0TZdtriTk986WtN4O8mFiw=\", false, function () {\n  return [useTheme, useDispatch, useNavigate, useMediaQuery];\n});\n_c = Form;\nexport default Form;\n/*Logic when we click on Register or Login is handled by button type Submit and anytime we have Button type\r\nsubmit-This Function will run and it will handle the stuff-\r\n<form onSubmit={handleSubmit}>\r\nAnd handleSubmit is actually-\r\nconst handleFormSubmit = async (values, onSubmitProps)\r\nif (isLogin) await login(values, onSubmitProps);->If we are on isLogin Page,we call our functionality\r\nwhich uses Backend to let us log in\r\nif (isRegister) await register(values, onSubmitProps);*/\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","Box","Button","TextField","useMediaQuery","Typography","useTheme","EditOutlinedIcon","Formik","yup","useNavigate","useDispatch","setLogin","Dropzone","FlexBetween","jsxDEV","_jsxDEV","Fragment","_Fragment","registerSchema","object","shape","firstName","string","required","lastName","email","password","location","occupation","picture","loginSchema","initialValuesRegister","initialValuesLogin","Form","_s","pageType","setPageType","palette","dispatch","navigate","isNonMobile","isLogin","isRegister","register","values","onSubmitProps","formData","FormData","value","append","name","savedUserResponse","fetch","method","body","savedUser","json","resetForm","login","loggedInResponse","headers","JSON","stringify","loggedIn","user","token","handleFormSubmit","onSubmit","initialValues","validationSchema","children","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","display","gap","gridTemplateColumns","sx","gridColumn","undefined","label","onBlur","onChange","error","Boolean","helperText","fileName","_jsxFileName","lineNumber","columnNumber","border","neutral","medium","borderRadius","p","acceptedFiles","multiple","onDrop","getRootProps","getInputProps","primary","main","cursor","type","fullWidth","m","backgroundColor","color","background","alt","onClick","textDecoration","light","_c","$RefreshReg$"],"sources":["E:/project_4/TripTales-Complete/client/src/scenes/loginPage/Form.jsx"],"sourcesContent":["//Register and Login Functionality\r\nimport { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  useMediaQuery,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";//Just for that Particular Icon\r\nimport { Formik } from \"formik\";//Will be used which is our Form Library\r\nimport * as yup from \"yup\";//Importing everything from yup which is our Validation Library\r\nimport { useNavigate } from \"react-router-dom\";//Be able to Navigate when registered to Login Page\r\nimport { useDispatch } from \"react-redux\";//Store User Information\r\nimport { setLogin } from \"state\";//Once the User sets the login Page\r\nimport Dropzone from \"react-dropzone\";//To Let user drop a file/image for their Profile Photo\r\nimport FlexBetween from \"components/FlexBetween\";//Will be using a lot\r\n\r\n//Yup Validation Schema-Determines the Shape of how the Form Library is going to save the Information\r\nconst registerSchema = yup.object().shape({//Passing all the values of our Schema\r\n  firstName: yup.string().required(\"required\"),\r\n  lastName: yup.string().required(\"required\"),\r\n  email: yup.string().email(\"invalid email\").required(\"required\"),\r\n  password: yup.string().required(\"required\"),\r\n  location: yup.string().required(\"required\"),\r\n  occupation: yup.string().required(\"required\"),\r\n  picture: yup.string().required(\"required\"),\r\n  //Validating the credentials values used while Registering\r\n});\r\n\r\nconst loginSchema = yup.object().shape({//Login Schema-Will be a Strip Down version of Register Schema\r\n  email: yup.string().email(\"invalid email\").required(\"required\"),\r\n  password: yup.string().required(\"required\"),\r\n});\r\n\r\n//Initial Value Setup (As Schema for Values has been defined)\r\nconst initialValuesRegister = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  location: \"\",\r\n  occupation: \"\",\r\n  picture: \"\",\r\n};\r\n\r\nconst initialValuesLogin = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\n//Creating our Form Component\r\nconst Form = () => {\r\n  //Creating Number of States\r\n  const [pageType, setPageType] = useState(\"login\");//Display form depending on PageType-Initial value set to login\r\n  const { palette } = useTheme();//Grabbing Palette from UseTheme\r\n  const dispatch = useDispatch();//Setting up Dispatch\r\n  const navigate = useNavigate();//useNavigate so that we can Navigate to different Pages\r\n  const isNonMobile = useMediaQuery(\"(min-width:600px)\");\r\n  const isLogin = pageType === \"login\";//Variables just for our Convenience\r\n  const isRegister = pageType === \"register\";//Variables just for our Convenience\r\n  //As they are booleans-So they are starting with prefix 'is'\r\n\r\n  const register = async (values, onSubmitProps) => {\r\n    /*Every value that we have created inside the TextField will show up in the value Parameter\r\n    Typically/Normally we could just use that values and then pass it into our request body itself\r\n    But as we have picture Image,we are going to use this thing called FormData from our Javascript API\r\n    This allows us to send form Info with Image-It essentially will be an Object*/\r\n    const formData = new FormData();\r\n    for (let value in values) {//Looping through every Key value in this values Object\r\n      formData.append(value, values[value]);//Appending-One way to send the image through the request body\r\n    }//This will cycle through all the values added to Form Data\r\n    formData.append(\"picturePath\", values.picture.name);//Appending Picture Path that will essentially be an Image\r\n    //So Say Image is name as P1.jpg-Then that will be name of our file and that's going to be the path\r\n    //We need to append this manually as that's how for the Images,it is going to work\r\n\r\n    //Saving User response\r\n    const savedUserResponse = await fetch(//Fetch Call to call an API to fetch whatever is returned\r\n      \"http://localhost:3001/auth/register\",\r\n      {//Sending form data to \"http://localhost:3001/auth/register\" API Call\r\n        method: \"POST\",\r\n        body: formData,\r\n      }\r\n    );\r\n    const savedUser = await savedUserResponse.json();//Converting it into parsable form by JSON and saving it\r\n    onSubmitProps.resetForm();//Resetting the Form-So That's why we are passing onSubmitProps from Formik\r\n\r\n    if (savedUser) {\r\n      setPageType(\"login\");//If Registration is successful,re-navigate to login page\r\n    }\r\n  };\r\n\r\n  const login = async (values, onSubmitProps) => {//Same Arguments as Register function\r\n    const loggedInResponse = await fetch(\"http://localhost:3001/auth/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },//headers being Content-type as we are not doing Form Data now\r\n      body: JSON.stringify(values),//Jsonify the values as they are formatted in correct way already\r\n    });\r\n    const loggedIn = await loggedInResponse.json();\r\n    onSubmitProps.resetForm();//Reset the Form\r\n    if (loggedIn) {//API Call succeeded-User Successfully Authenticated Then dispatch setLogin Function\r\n      dispatch(\r\n        setLogin({\r\n          user: loggedIn.user,//Parameters coming from Redux state\r\n          token: loggedIn.token,//To be passed as an Object-A Thing about Redux Toolkit\r\n        })\r\n      );\r\n      navigate(\"/home\");//Navigate to Home as we have successfully authenticated\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = async (values, onSubmitProps) => {//Asynchronous Function to Handle Form Submission\r\n    //The arguments-values and onSubmitProps is coming from Formic\r\n    if (isLogin) await login(values, onSubmitProps);\r\n    if (isRegister) await register(values, onSubmitProps);\r\n  };\r\n\r\n  return (\r\n    /*Returning the Formik Component*/\r\n    <Formik\r\n      onSubmit={handleFormSubmit}\r\n      initialValues={isLogin ? initialValuesLogin : initialValuesRegister}\r\n      /*So When we are on LoginPage-We will initialize the values with our Login Component\r\n      Otherwise we use our Register Object */\r\n      validationSchema={isLogin ? loginSchema : registerSchema}//Doing Same thing for Validation Schema\r\n    >\r\n      {/*Having values to use in our Components and Form*/}\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        setFieldValue,\r\n        resetForm,\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>{/*Formik is grabbing the HandleFormSubmit and passing it into\r\n        our Formik values and then to onSubmit function*/}\r\n          <Box\r\n            display=\"grid\"//Using Grid for this Section\r\n            gap=\"30px\"//Gap of 30pixels between items\r\n            gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\"//fr-Fractional Unit And we are creating our Grid Template Columns\r\n            //So We are splitting our grid into 4 sections-And it's going to be a minimum of 0 if it's too small it will shrink all the way to 0\r\n            //Otherwise We are gonna split it in equal fractions of Four\r\n            sx={{\r\n              \"& > div\": { gridColumn: isNonMobile ? undefined : \"span 4\" },//Targeting any Div's of our Box as a Child Component/Child Class\r\n            }}//If NonMobile-grid Columns of Text will be what we have defined earlier\r\n            //But If It is a Mobile-gridColumns span will be 4-That is each Text field will have it's own entire Width\r\n          >\r\n            {isRegister && (//If On Register Page\r\n              <>\r\n                <TextField \r\n                  /*Textfield is an Input Component from Material UI*/\r\n                  label=\"First Name\"\r\n                  onBlur={handleBlur}//handleBlur-Will handle the situation when we click out of a Input\r\n                  onChange={handleChange}//Handle the situation when we are typing\r\n                  value={values.firstName}\r\n                  name=\"firstName\"//Syncing it to the correct value in initialValuesRegister\r\n                  //name has to align with the value we are setting in initialValuesRegister\r\n                  error={\r\n                    Boolean(touched.firstName) && Boolean(errors.firstName)\r\n                  }//If First Name has been touched or There is an error=Will show Error in the Textfield\r\n                  helperText={touched.firstName && errors.firstName}\r\n                  sx={{ gridColumn: \"span 2\" }}//In Larger Screens we will have span of 2\r\n                  //But In Smaller Screen-span 4 will overwrite span 2\r\n                />\r\n                <TextField\r\n                  //Rest all field are same-Just change the variables\r\n                  label=\"Last Name\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.lastName}\r\n                  name=\"lastName\"\r\n                  error={Boolean(touched.lastName) && Boolean(errors.lastName)}\r\n                  helperText={touched.lastName && errors.lastName}\r\n                  sx={{ gridColumn: \"span 2\" }}\r\n                />\r\n                <TextField\r\n                  //Everything Same-Just make them Span of 4\r\n                  label=\"Location\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.location}\r\n                  name=\"location\"\r\n                  error={Boolean(touched.location) && Boolean(errors.location)}\r\n                  helperText={touched.location && errors.location}\r\n                  sx={{ gridColumn: \"span 4\" }}\r\n                />\r\n                <TextField\r\n                  label=\"Occupation\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.occupation}\r\n                  name=\"occupation\"\r\n                  error={\r\n                    Boolean(touched.occupation) && Boolean(errors.occupation)\r\n                  }\r\n                  helperText={touched.occupation && errors.occupation}\r\n                  sx={{ gridColumn: \"span 4\" }}\r\n                />\r\n                <Box\r\n                  //Box of Inputting Profile Image\r\n                  gridColumn=\"span 4\"\r\n                  border={`1px solid ${palette.neutral.medium}`}\r\n                  borderRadius=\"5px\"\r\n                  p=\"1rem\"\r\n                >\r\n                  <Dropzone\r\n                    //Inside Box-Using Component Dropzone\r\n                    acceptedFiles=\".jpg,.jpeg,.png\"//Passing Configurations for Files format to accept\r\n                    multiple={false}//You can set only one file-Can't upload multiple files\r\n                    onDrop={(acceptedFiles) =>\r\n                      //onDrop-Callback function of what we do with the Files once the User Drops it in\r\n                      setFieldValue(\"picture\", acceptedFiles[0])//Since we are using Dropzone,we have to set this value manually\r\n                      //setFieldValue for a specific Formic Field called Picture\r\n                    }\r\n                  >\r\n                    {({ getRootProps, getInputProps }) => (//Callback Function from DropZone-Using Props to pass in JSX\r\n                      <Box\r\n                        {...getRootProps()}//Pass and to get Root Props-Something we have to do with the Dropzone\r\n                        border={`2px dashed ${palette.primary.main}`}\r\n                        p=\"1rem\"\r\n                        sx={{ \"&:hover\": { cursor: \"pointer\" } }}//Targetting the Hover\r\n                      >\r\n                        <input {...getInputProps()} />{/*Invoking getInputProps() function*/}\r\n                        {!values.picture ? (//If Value does not exists for the picture-Display the Paragraph tag\r\n                          <p>Add Picture Here</p>\r\n                        ) : (\r\n                          <FlexBetween>\r\n                            <Typography>{values.picture.name}</Typography>{/*Otherwise show the name of the Image that has been added\r\n                            If value exists for picture*/}\r\n                            <EditOutlinedIcon />\r\n                          </FlexBetween>\r\n                        )}\r\n                      </Box>\r\n                    )}\r\n                  </Dropzone>\r\n                </Box>\r\n              </>\r\n            )}\r\n\r\n            {/*This Section Email and Password will be for both Login and Register Page*/}\r\n            <TextField\r\n              label=\"Email\"\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              value={values.email}\r\n              name=\"email\"\r\n              error={Boolean(touched.email) && Boolean(errors.email)}\r\n              helperText={touched.email && errors.email}\r\n              sx={{ gridColumn: \"span 4\" }}\r\n            />\r\n            <TextField\r\n              label=\"Password\"\r\n              type=\"password\"//Only thing added-As we want the Password to be hidden when typing it\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              value={values.password}\r\n              name=\"password\"\r\n              error={Boolean(touched.password) && Boolean(errors.password)}\r\n              helperText={touched.password && errors.password}\r\n              sx={{ gridColumn: \"span 4\" }}\r\n            />\r\n          </Box>\r\n\r\n          {/* Buttons */}\r\n          <Box>{/*Creating Button-Which will switch between being a Register button/Login Button */}\r\n            <Button\r\n              fullWidth\r\n              type=\"submit\"\r\n              sx={{\r\n                m: \"2rem 0\",\r\n                p: \"1rem\",\r\n                backgroundColor: palette.primary.main,\r\n                color: palette.background.alt,\r\n                \"&:hover\": { color: palette.primary.main },\r\n              }}\r\n            >\r\n              {isLogin ? \"LOGIN\" : \"REGISTER\"} {/*Switching the text for the Button as Login or Register\r\n              According to the Page it is present on*/}\r\n            </Button>\r\n            <Typography\r\n              onClick={() => {\r\n                setPageType(isLogin ? \"register\" : \"login\");\r\n                resetForm();//When Switching between register and login,we are cleaning the inputs we already have\r\n              }}\r\n              sx={{\r\n                textDecoration: \"underline\",\r\n                color: palette.primary.main,\r\n                \"&:hover\": {\r\n                  cursor: \"pointer\",\r\n                  color: palette.primary.light,\r\n                },\r\n              }}\r\n            >\r\n              {isLogin\r\n                ? \"Don't have an account? Sign Up here\"\r\n                : \"Already have an account? Login here\"}\r\n                {/*If on Login Page- isLogin will be true so text \"Don't have an account? Sign Up here\"\r\n                will be shown But if it is False-The text \"Already have an account? Login here\" will be shown*/}\r\n            </Typography>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n/*Logic when we click on Register or Login is handled by button type Submit and anytime we have Button type\r\nsubmit-This Function will run and it will handle the stuff-\r\n<form onSubmit={handleSubmit}>\r\nAnd handleSubmit is actually-\r\nconst handleFormSubmit = async (values, onSubmitProps)\r\nif (isLogin) await login(values, onSubmitProps);->If we are on isLogin Page,we call our functionality\r\nwhich uses Backend to let us log in\r\nif (isRegister) await register(values, onSubmitProps);*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}